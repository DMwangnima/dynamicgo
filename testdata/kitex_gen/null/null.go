// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package null

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type NullStruct struct {
	Null1 int64            `thrift:"Null1,1" json:"Null1"`
	Null2 *int64           `thrift:"Null2,2" json:"Null2,omitempty"`
	Null3 int64            `thrift:"Null3,3,required" json:"Null3"`
	Null4 []int64          `thrift:"Null4,4" json:"Null4"`
	Null5 map[string]int64 `thrift:"Null5,5" json:"Null5"`
	Null6 map[int64]int64  `thrift:"Null6,6" json:"Null6"`
}

func NewNullStruct() *NullStruct {
	return &NullStruct{}
}

func (p *NullStruct) GetNull1() (v int64) {
	return p.Null1
}

var NullStruct_Null2_DEFAULT int64

func (p *NullStruct) GetNull2() (v int64) {
	if !p.IsSetNull2() {
		return NullStruct_Null2_DEFAULT
	}
	return *p.Null2
}

func (p *NullStruct) GetNull3() (v int64) {
	return p.Null3
}

func (p *NullStruct) GetNull4() (v []int64) {
	return p.Null4
}

func (p *NullStruct) GetNull5() (v map[string]int64) {
	return p.Null5
}

func (p *NullStruct) GetNull6() (v map[int64]int64) {
	return p.Null6
}
func (p *NullStruct) SetNull1(val int64) {
	p.Null1 = val
}
func (p *NullStruct) SetNull2(val *int64) {
	p.Null2 = val
}
func (p *NullStruct) SetNull3(val int64) {
	p.Null3 = val
}
func (p *NullStruct) SetNull4(val []int64) {
	p.Null4 = val
}
func (p *NullStruct) SetNull5(val map[string]int64) {
	p.Null5 = val
}
func (p *NullStruct) SetNull6(val map[int64]int64) {
	p.Null6 = val
}

var fieldIDToName_NullStruct = map[int16]string{
	1: "Null1",
	2: "Null2",
	3: "Null3",
	4: "Null4",
	5: "Null5",
	6: "Null6",
}

func (p *NullStruct) IsSetNull2() bool {
	return p.Null2 != nil
}

func (p *NullStruct) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetNull3 bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetNull3 = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetNull3 {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NullStruct[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field %s is not set", fieldIDToName_NullStruct[fieldId]))
}

func (p *NullStruct) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Null1 = v
	}
	return nil
}

func (p *NullStruct) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Null2 = &v
	}
	return nil
}

func (p *NullStruct) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Null3 = v
	}
	return nil
}

func (p *NullStruct) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Null4 = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Null4 = append(p.Null4, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NullStruct) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Null5 = make(map[string]int64, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Null5[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NullStruct) ReadField6(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Null6 = make(map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Null6[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *NullStruct) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NullStruct"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NullStruct) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Null1", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Null1); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NullStruct) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetNull2() {
		if err = oprot.WriteFieldBegin("Null2", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Null2); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *NullStruct) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Null3", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Null3); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *NullStruct) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Null4", thrift.LIST, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.Null4)); err != nil {
		return err
	}
	for _, v := range p.Null4 {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *NullStruct) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Null5", thrift.MAP, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.Null5)); err != nil {
		return err
	}
	for k, v := range p.Null5 {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *NullStruct) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Null6", thrift.MAP, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.Null6)); err != nil {
		return err
	}
	for k, v := range p.Null6 {

		if err := oprot.WriteI64(k); err != nil {
			return err
		}

		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *NullStruct) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NullStruct(%+v)", *p)
}

func (p *NullStruct) DeepEqual(ano *NullStruct) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Null1) {
		return false
	}
	if !p.Field2DeepEqual(ano.Null2) {
		return false
	}
	if !p.Field3DeepEqual(ano.Null3) {
		return false
	}
	if !p.Field4DeepEqual(ano.Null4) {
		return false
	}
	if !p.Field5DeepEqual(ano.Null5) {
		return false
	}
	if !p.Field6DeepEqual(ano.Null6) {
		return false
	}
	return true
}

func (p *NullStruct) Field1DeepEqual(src int64) bool {

	if p.Null1 != src {
		return false
	}
	return true
}
func (p *NullStruct) Field2DeepEqual(src *int64) bool {

	if p.Null2 == src {
		return true
	} else if p.Null2 == nil || src == nil {
		return false
	}
	if *p.Null2 != *src {
		return false
	}
	return true
}
func (p *NullStruct) Field3DeepEqual(src int64) bool {

	if p.Null3 != src {
		return false
	}
	return true
}
func (p *NullStruct) Field4DeepEqual(src []int64) bool {

	if len(p.Null4) != len(src) {
		return false
	}
	for i, v := range p.Null4 {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *NullStruct) Field5DeepEqual(src map[string]int64) bool {

	if len(p.Null5) != len(src) {
		return false
	}
	for k, v := range p.Null5 {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *NullStruct) Field6DeepEqual(src map[int64]int64) bool {

	if len(p.Null6) != len(src) {
		return false
	}
	for k, v := range p.Null6 {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}

type NullService interface {
	NullTest(ctx context.Context, req *NullStruct) (r *NullStruct, err error)
}

type NullServiceClient struct {
	c thrift.TClient
}

func NewNullServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *NullServiceClient {
	return &NullServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewNullServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *NullServiceClient {
	return &NullServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewNullServiceClient(c thrift.TClient) *NullServiceClient {
	return &NullServiceClient{
		c: c,
	}
}

func (p *NullServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *NullServiceClient) NullTest(ctx context.Context, req *NullStruct) (r *NullStruct, err error) {
	var _args NullServiceNullTestArgs
	_args.Req = req
	var _result NullServiceNullTestResult
	if err = p.Client_().Call(ctx, "NullTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type NullServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      NullService
}

func (p *NullServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *NullServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *NullServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewNullServiceProcessor(handler NullService) *NullServiceProcessor {
	self := &NullServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("NullTest", &nullServiceProcessorNullTest{handler: handler})
	return self
}
func (p *NullServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type nullServiceProcessorNullTest struct {
	handler NullService
}

func (p *nullServiceProcessorNullTest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NullServiceNullTestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("NullTest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := NullServiceNullTestResult{}
	var retval *NullStruct
	if retval, err2 = p.handler.NullTest(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing NullTest: "+err2.Error())
		oprot.WriteMessageBegin("NullTest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("NullTest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type NullServiceNullTestArgs struct {
	Req *NullStruct `thrift:"req,1" json:"req"`
}

func NewNullServiceNullTestArgs() *NullServiceNullTestArgs {
	return &NullServiceNullTestArgs{}
}

var NullServiceNullTestArgs_Req_DEFAULT *NullStruct

func (p *NullServiceNullTestArgs) GetReq() (v *NullStruct) {
	if !p.IsSetReq() {
		return NullServiceNullTestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *NullServiceNullTestArgs) SetReq(val *NullStruct) {
	p.Req = val
}

var fieldIDToName_NullServiceNullTestArgs = map[int16]string{
	1: "req",
}

func (p *NullServiceNullTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *NullServiceNullTestArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NullServiceNullTestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NullServiceNullTestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewNullStruct()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NullServiceNullTestArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NullTest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NullServiceNullTestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *NullServiceNullTestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NullServiceNullTestArgs(%+v)", *p)
}

func (p *NullServiceNullTestArgs) DeepEqual(ano *NullServiceNullTestArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *NullServiceNullTestArgs) Field1DeepEqual(src *NullStruct) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type NullServiceNullTestResult struct {
	Success *NullStruct `thrift:"success,0" json:"success,omitempty"`
}

func NewNullServiceNullTestResult() *NullServiceNullTestResult {
	return &NullServiceNullTestResult{}
}

var NullServiceNullTestResult_Success_DEFAULT *NullStruct

func (p *NullServiceNullTestResult) GetSuccess() (v *NullStruct) {
	if !p.IsSetSuccess() {
		return NullServiceNullTestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *NullServiceNullTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*NullStruct)
}

var fieldIDToName_NullServiceNullTestResult = map[int16]string{
	0: "success",
}

func (p *NullServiceNullTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *NullServiceNullTestResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_NullServiceNullTestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *NullServiceNullTestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewNullStruct()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *NullServiceNullTestResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("NullTest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *NullServiceNullTestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *NullServiceNullTestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NullServiceNullTestResult(%+v)", *p)
}

func (p *NullServiceNullTestResult) DeepEqual(ano *NullServiceNullTestResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *NullServiceNullTestResult) Field0DeepEqual(src *NullStruct) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
